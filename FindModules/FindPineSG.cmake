SET ( PINE_SG_PATH
	${PINE_SG_PATH}	
	"$ENV{PINE_SG_DIR}"
	"$ENV{PROGRAMFILES}/PineSceneGraph"
	"${3RD_PARTY_DIRECTORY}/PineSceneGraph"	
)

FIND_PATH ( 
	PINE_SG_INCLUDE_DIR
	pine/Node.h
	PATH_SUFFIXES "include" "PineSceneGraph" 
	PATHS ${PINE_SG_PATH}	
)

FIND_LIBRARY ( 
	PINE_SG_LIBRARY_DEBUG
	NAMES PineSGd
	PATH_SUFFIXES "lib/" "lib64/"		
	PATHS ${PINE_SG_PATH}
)

FIND_LIBRARY ( 
	PINE_SG_LIBRARY_RELEASE
	NAMES PineSG
	PATH_SUFFIXES "lib/" "lib64/"		
	PATHS ${PINE_SG_PATH}
)
		
IF ( NOT PINE_SG_LIBRARY_RELEASE AND PINE_SG_LIBRARY_DEBUG )
	SET ( PINE_SG_LIBRARY_RELEASE ${PINE_SG_LIBRARY_DEBUG} )
ENDIF ( NOT PINE_SG_LIBRARY_RELEASE AND PINE_SG_LIBRARY_DEBUG )

IF ( NOT PINE_SG_LIBRARY_DEBUG AND PINE_SG_LIBRARY_RELEASE )
	SET ( PINE_SG_LIBRARY_DEBUG ${PINE_SG_LIBRARY_RELEASE} )
ENDIF ( NOT PINE_SG_LIBRARY_DEBUG AND PINE_SG_LIBRARY_RELEASE )

SET( PINE_SG_LIBRARY ${PINE_SG_LIBRARY_RELEASE} )
SET( PINE_SG_LIBRARIES 
	debug ${PINE_SG_LIBRARY_DEBUG}	optimized ${PINE_SG_LIBRARY_RELEASE}
)

IF ( PINE_SG_INCLUDE_DIR AND PINE_SG_LIBRARY )
	SET ( PINE_SG_FOUND YES )
	MESSAGE( STATUS "PineSG found: ${PINE_SG_LIBRARY}" )
ENDIF ( PINE_SG_INCLUDE_DIR AND PINE_SG_LIBRARY ) 